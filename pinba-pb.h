// Generated by the protocol buffer compiler.  DO NOT EDIT!

#ifndef PROTOBUF_pinba_2eproto__INCLUDED
#define PROTOBUF_pinba_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2000003
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2000003 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>

namespace Pinba {

// Internal implementation detail -- do not call these.
void  protobuf_BuildDesc_pinba_2eproto();
void protobuf_BuildDesc_pinba_2eproto_AssignGlobalDescriptors(
    ::google::protobuf::FileDescriptor* file);

class Request;

// ===================================================================

class Request : public ::google::protobuf::Message {
 public:
  Request();
  virtual ~Request();
  
  Request(const Request& from);
  
  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Request& default_instance();
  void Swap(Request* other);
  
  // implements Message ----------------------------------------------
  
  Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  void Clear();
  bool IsInitialized() const;
  int ByteSize() const;
  
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  bool SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string hostname = 1;
  inline bool has_hostname() const;
  inline void clear_hostname();
  inline const ::std::string& hostname() const;
  inline void set_hostname(const ::std::string& value);
  inline void set_hostname(const char* value);
  inline ::std::string* mutable_hostname();
  
  // required string server_name = 2;
  inline bool has_server_name() const;
  inline void clear_server_name();
  inline const ::std::string& server_name() const;
  inline void set_server_name(const ::std::string& value);
  inline void set_server_name(const char* value);
  inline ::std::string* mutable_server_name();
  
  // required string script_name = 3;
  inline bool has_script_name() const;
  inline void clear_script_name();
  inline const ::std::string& script_name() const;
  inline void set_script_name(const ::std::string& value);
  inline void set_script_name(const char* value);
  inline ::std::string* mutable_script_name();
  
  // required uint32 request_count = 4;
  inline bool has_request_count() const;
  inline void clear_request_count();
  inline ::google::protobuf::uint32 request_count() const;
  inline void set_request_count(::google::protobuf::uint32 value);
  
  // required uint32 document_size = 5;
  inline bool has_document_size() const;
  inline void clear_document_size();
  inline ::google::protobuf::uint32 document_size() const;
  inline void set_document_size(::google::protobuf::uint32 value);
  
  // required uint32 memory_peak = 6;
  inline bool has_memory_peak() const;
  inline void clear_memory_peak();
  inline ::google::protobuf::uint32 memory_peak() const;
  inline void set_memory_peak(::google::protobuf::uint32 value);
  
  // required float request_time = 7;
  inline bool has_request_time() const;
  inline void clear_request_time();
  inline float request_time() const;
  inline void set_request_time(float value);
  
  // required float ru_utime = 8;
  inline bool has_ru_utime() const;
  inline void clear_ru_utime();
  inline float ru_utime() const;
  inline void set_ru_utime(float value);
  
  // required float ru_stime = 9;
  inline bool has_ru_stime() const;
  inline void clear_ru_stime();
  inline float ru_stime() const;
  inline void set_ru_stime(float value);
  
  // repeated uint32 timer_hit_count = 10;
  inline int timer_hit_count_size() const;
  inline void clear_timer_hit_count();
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >& timer_hit_count() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >* mutable_timer_hit_count();
  inline ::google::protobuf::uint32 timer_hit_count(int index) const;
  inline void set_timer_hit_count(int index, ::google::protobuf::uint32 value);
  inline void add_timer_hit_count(::google::protobuf::uint32 value);
  
  // repeated float timer_value = 11;
  inline int timer_value_size() const;
  inline void clear_timer_value();
  inline const ::google::protobuf::RepeatedField< float >& timer_value() const;
  inline ::google::protobuf::RepeatedField< float >* mutable_timer_value();
  inline float timer_value(int index) const;
  inline void set_timer_value(int index, float value);
  inline void add_timer_value(float value);
  
  // repeated uint32 timer_tag_count = 12;
  inline int timer_tag_count_size() const;
  inline void clear_timer_tag_count();
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >& timer_tag_count() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >* mutable_timer_tag_count();
  inline ::google::protobuf::uint32 timer_tag_count(int index) const;
  inline void set_timer_tag_count(int index, ::google::protobuf::uint32 value);
  inline void add_timer_tag_count(::google::protobuf::uint32 value);
  
  // repeated uint32 timer_tag_name = 13;
  inline int timer_tag_name_size() const;
  inline void clear_timer_tag_name();
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >& timer_tag_name() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >* mutable_timer_tag_name();
  inline ::google::protobuf::uint32 timer_tag_name(int index) const;
  inline void set_timer_tag_name(int index, ::google::protobuf::uint32 value);
  inline void add_timer_tag_name(::google::protobuf::uint32 value);
  
  // repeated uint32 timer_tag_value = 14;
  inline int timer_tag_value_size() const;
  inline void clear_timer_tag_value();
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >& timer_tag_value() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >* mutable_timer_tag_value();
  inline ::google::protobuf::uint32 timer_tag_value(int index) const;
  inline void set_timer_tag_value(int index, ::google::protobuf::uint32 value);
  inline void add_timer_tag_value(::google::protobuf::uint32 value);
  
  // repeated string dictionary = 15;
  inline int dictionary_size() const;
  inline void clear_dictionary();
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& dictionary() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_dictionary();
  inline const ::std::string& dictionary(int index) const;
  inline ::std::string* mutable_dictionary(int index);
  inline void set_dictionary(int index, const ::std::string& value);
  inline void set_dictionary(int index, const char* value);
  inline ::std::string* add_dictionary();
  inline void add_dictionary(const ::std::string& value);
  inline void add_dictionary(const char* value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* hostname_;
  static const ::std::string _default_hostname_;
  ::std::string* server_name_;
  static const ::std::string _default_server_name_;
  ::std::string* script_name_;
  static const ::std::string _default_script_name_;
  ::google::protobuf::uint32 request_count_;
  ::google::protobuf::uint32 document_size_;
  ::google::protobuf::uint32 memory_peak_;
  float request_time_;
  float ru_utime_;
  float ru_stime_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > timer_hit_count_;
  ::google::protobuf::RepeatedField< float > timer_value_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > timer_tag_count_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > timer_tag_name_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > timer_tag_value_;
  ::google::protobuf::RepeatedPtrField< ::std::string> dictionary_;
  friend void protobuf_BuildDesc_pinba_2eproto_AssignGlobalDescriptors(
      const ::google::protobuf::FileDescriptor* file);
  ::google::protobuf::uint32 _has_bits_[(15 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Request* default_instance_;
};
// ===================================================================


// ===================================================================


// ===================================================================

// Request

// required string hostname = 1;
inline bool Request::has_hostname() const {
  return _has_bit(0);
}
inline void Request::clear_hostname() {
  if (hostname_ != &_default_hostname_) {
    hostname_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& Request::hostname() const {
  return *hostname_;
}
inline void Request::set_hostname(const ::std::string& value) {
  _set_bit(0);
  if (hostname_ == &_default_hostname_) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(value);
}
inline void Request::set_hostname(const char* value) {
  _set_bit(0);
  if (hostname_ == &_default_hostname_) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(value);
}
inline ::std::string* Request::mutable_hostname() {
  _set_bit(0);
  if (hostname_ == &_default_hostname_) {
    hostname_ = new ::std::string;
  }
  return hostname_;
}

// required string server_name = 2;
inline bool Request::has_server_name() const {
  return _has_bit(1);
}
inline void Request::clear_server_name() {
  if (server_name_ != &_default_server_name_) {
    server_name_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& Request::server_name() const {
  return *server_name_;
}
inline void Request::set_server_name(const ::std::string& value) {
  _set_bit(1);
  if (server_name_ == &_default_server_name_) {
    server_name_ = new ::std::string;
  }
  server_name_->assign(value);
}
inline void Request::set_server_name(const char* value) {
  _set_bit(1);
  if (server_name_ == &_default_server_name_) {
    server_name_ = new ::std::string;
  }
  server_name_->assign(value);
}
inline ::std::string* Request::mutable_server_name() {
  _set_bit(1);
  if (server_name_ == &_default_server_name_) {
    server_name_ = new ::std::string;
  }
  return server_name_;
}

// required string script_name = 3;
inline bool Request::has_script_name() const {
  return _has_bit(2);
}
inline void Request::clear_script_name() {
  if (script_name_ != &_default_script_name_) {
    script_name_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& Request::script_name() const {
  return *script_name_;
}
inline void Request::set_script_name(const ::std::string& value) {
  _set_bit(2);
  if (script_name_ == &_default_script_name_) {
    script_name_ = new ::std::string;
  }
  script_name_->assign(value);
}
inline void Request::set_script_name(const char* value) {
  _set_bit(2);
  if (script_name_ == &_default_script_name_) {
    script_name_ = new ::std::string;
  }
  script_name_->assign(value);
}
inline ::std::string* Request::mutable_script_name() {
  _set_bit(2);
  if (script_name_ == &_default_script_name_) {
    script_name_ = new ::std::string;
  }
  return script_name_;
}

// required uint32 request_count = 4;
inline bool Request::has_request_count() const {
  return _has_bit(3);
}
inline void Request::clear_request_count() {
  request_count_ = 0u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 Request::request_count() const {
  return request_count_;
}
inline void Request::set_request_count(::google::protobuf::uint32 value) {
  _set_bit(3);
  request_count_ = value;
}

// required uint32 document_size = 5;
inline bool Request::has_document_size() const {
  return _has_bit(4);
}
inline void Request::clear_document_size() {
  document_size_ = 0u;
  _clear_bit(4);
}
inline ::google::protobuf::uint32 Request::document_size() const {
  return document_size_;
}
inline void Request::set_document_size(::google::protobuf::uint32 value) {
  _set_bit(4);
  document_size_ = value;
}

// required uint32 memory_peak = 6;
inline bool Request::has_memory_peak() const {
  return _has_bit(5);
}
inline void Request::clear_memory_peak() {
  memory_peak_ = 0u;
  _clear_bit(5);
}
inline ::google::protobuf::uint32 Request::memory_peak() const {
  return memory_peak_;
}
inline void Request::set_memory_peak(::google::protobuf::uint32 value) {
  _set_bit(5);
  memory_peak_ = value;
}

// required float request_time = 7;
inline bool Request::has_request_time() const {
  return _has_bit(6);
}
inline void Request::clear_request_time() {
  request_time_ = 0;
  _clear_bit(6);
}
inline float Request::request_time() const {
  return request_time_;
}
inline void Request::set_request_time(float value) {
  _set_bit(6);
  request_time_ = value;
}

// required float ru_utime = 8;
inline bool Request::has_ru_utime() const {
  return _has_bit(7);
}
inline void Request::clear_ru_utime() {
  ru_utime_ = 0;
  _clear_bit(7);
}
inline float Request::ru_utime() const {
  return ru_utime_;
}
inline void Request::set_ru_utime(float value) {
  _set_bit(7);
  ru_utime_ = value;
}

// required float ru_stime = 9;
inline bool Request::has_ru_stime() const {
  return _has_bit(8);
}
inline void Request::clear_ru_stime() {
  ru_stime_ = 0;
  _clear_bit(8);
}
inline float Request::ru_stime() const {
  return ru_stime_;
}
inline void Request::set_ru_stime(float value) {
  _set_bit(8);
  ru_stime_ = value;
}

// repeated uint32 timer_hit_count = 10;
inline int Request::timer_hit_count_size() const {
  return timer_hit_count_.size();
}
inline void Request::clear_timer_hit_count() {
  timer_hit_count_.Clear();
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Request::timer_hit_count() const {
  return timer_hit_count_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Request::mutable_timer_hit_count() {
  return &timer_hit_count_;
}
inline ::google::protobuf::uint32 Request::timer_hit_count(int index) const {
  return timer_hit_count_.Get(index);
}
inline void Request::set_timer_hit_count(int index, ::google::protobuf::uint32 value) {
  timer_hit_count_.Set(index, value);
}
inline void Request::add_timer_hit_count(::google::protobuf::uint32 value) {
  timer_hit_count_.Add(value);
}

// repeated float timer_value = 11;
inline int Request::timer_value_size() const {
  return timer_value_.size();
}
inline void Request::clear_timer_value() {
  timer_value_.Clear();
}
inline const ::google::protobuf::RepeatedField< float >&
Request::timer_value() const {
  return timer_value_;
}
inline ::google::protobuf::RepeatedField< float >*
Request::mutable_timer_value() {
  return &timer_value_;
}
inline float Request::timer_value(int index) const {
  return timer_value_.Get(index);
}
inline void Request::set_timer_value(int index, float value) {
  timer_value_.Set(index, value);
}
inline void Request::add_timer_value(float value) {
  timer_value_.Add(value);
}

// repeated uint32 timer_tag_count = 12;
inline int Request::timer_tag_count_size() const {
  return timer_tag_count_.size();
}
inline void Request::clear_timer_tag_count() {
  timer_tag_count_.Clear();
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Request::timer_tag_count() const {
  return timer_tag_count_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Request::mutable_timer_tag_count() {
  return &timer_tag_count_;
}
inline ::google::protobuf::uint32 Request::timer_tag_count(int index) const {
  return timer_tag_count_.Get(index);
}
inline void Request::set_timer_tag_count(int index, ::google::protobuf::uint32 value) {
  timer_tag_count_.Set(index, value);
}
inline void Request::add_timer_tag_count(::google::protobuf::uint32 value) {
  timer_tag_count_.Add(value);
}

// repeated uint32 timer_tag_name = 13;
inline int Request::timer_tag_name_size() const {
  return timer_tag_name_.size();
}
inline void Request::clear_timer_tag_name() {
  timer_tag_name_.Clear();
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Request::timer_tag_name() const {
  return timer_tag_name_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Request::mutable_timer_tag_name() {
  return &timer_tag_name_;
}
inline ::google::protobuf::uint32 Request::timer_tag_name(int index) const {
  return timer_tag_name_.Get(index);
}
inline void Request::set_timer_tag_name(int index, ::google::protobuf::uint32 value) {
  timer_tag_name_.Set(index, value);
}
inline void Request::add_timer_tag_name(::google::protobuf::uint32 value) {
  timer_tag_name_.Add(value);
}

// repeated uint32 timer_tag_value = 14;
inline int Request::timer_tag_value_size() const {
  return timer_tag_value_.size();
}
inline void Request::clear_timer_tag_value() {
  timer_tag_value_.Clear();
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Request::timer_tag_value() const {
  return timer_tag_value_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Request::mutable_timer_tag_value() {
  return &timer_tag_value_;
}
inline ::google::protobuf::uint32 Request::timer_tag_value(int index) const {
  return timer_tag_value_.Get(index);
}
inline void Request::set_timer_tag_value(int index, ::google::protobuf::uint32 value) {
  timer_tag_value_.Set(index, value);
}
inline void Request::add_timer_tag_value(::google::protobuf::uint32 value) {
  timer_tag_value_.Add(value);
}

// repeated string dictionary = 15;
inline int Request::dictionary_size() const {
  return dictionary_.size();
}
inline void Request::clear_dictionary() {
  dictionary_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Request::dictionary() const {
  return dictionary_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Request::mutable_dictionary() {
  return &dictionary_;
}
inline const ::std::string& Request::dictionary(int index) const {
  return dictionary_.Get(index);
}
inline ::std::string* Request::mutable_dictionary(int index) {
  return dictionary_.Mutable(index);
}
inline void Request::set_dictionary(int index, const ::std::string& value) {
  dictionary_.Mutable(index)->assign(value);
}
inline void Request::set_dictionary(int index, const char* value) {
  dictionary_.Mutable(index)->assign(value);
}
inline ::std::string* Request::add_dictionary() {
  return dictionary_.Add();
}
inline void Request::add_dictionary(const ::std::string& value) {
  dictionary_.Add()->assign(value);
}
inline void Request::add_dictionary(const char* value) {
  dictionary_.Add()->assign(value);
}


}  // namespace Pinba
#endif  // PROTOBUF_pinba_2eproto__INCLUDED
